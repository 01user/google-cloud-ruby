var search_data = {"index":{"searchIndex":["gcloud","backoff","datastore","apierror","dataset","lookupresults","queryresults","entity","error","key","keyfileerror","properties","propertyerror","proto","key","query","transaction","transactionerror","error","storage","apierror","bucket","acl","defaultacl","list","error","file","acl","list","signer","fileverificationerror","project","[]()","[]()","[]=()","[]=()","acl()","acl()","add_owner()","add_owner()","add_owner()","add_reader()","add_reader()","add_reader()","add_writer()","add_writer()","add_writer()","allocate_ids()","ancestor()","apply_option_defaults()","auth!()","auth!()","auth!()","auth_read!()","auth_read!()","auth_read!()","authenticated!()","authenticated!()","authenticated!()","authenticatedread!()","authenticatedread!()","authenticatedread!()","authenticated_read!()","authenticated_read!()","authenticated_read!()","begin_transaction()","bucket()","bucketownerfullcontrol!()","bucketownerfullcontrol!()","bucketownerread!()","bucketownerread!()","buckets()","commit()","complete?()","copy()","crc32c()","create_bucket()","create_file()","created_at()","cursor()","datastore()","default_acl()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","download()","dup()","each()","ensure_connection!()","ensure_connection!()","ensure_key_type()","ensure_value_type()","entities_from_acls()","entities_from_acls()","entities_from_acls()","etag()","exclude_from_indexes!()","exclude_from_indexes?()","exist?()","ext_path()","ext_url()","fetch()","files()","filter()","find()","find_all()","find_bucket()","find_file()","fix_copy_args()","generation()","get()","group_by()","id()","id()","incomplete?()","issuer()","key=()","kind()","kind()","kind()","limit()","location()","lookup()","md5()","metageneration()","more_after_limit?()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_more?()","not_finished?()","offset()","order()","owner_full!()","owner_full!()","owner_read!()","owner_read!()","owners()","owners()","owners()","path()","persisted?()","predefined_rule_for()","predefined_rule_for()","predefined_rule_for()","private!()","private!()","private!()","project()","project()","projectprivate!()","projectprivate!()","projectprivate!()","project_private!()","project_private!()","project_private!()","projection()","public!()","public!()","public!()","publicread!()","publicread!()","publicread!()","publicreadwrite!()","public_read!()","public_read!()","public_read!()","public_write!()","read()","readers()","readers()","readers()","refresh!()","refresh!()","refresh!()","reset!()","resumable_threshold()","resumable_threshold=()","rollback()","run()","run_query()","save()","save()","select()","signature_str()","signed_url()","signed_url()","signing_key()","size()","start()","start()","storage()","to_gcloud_entities()","to_gcloud_keys()","to_h()","to_hash()","transaction()","update_predefined_acl!()","update_predefined_acl!()","update_predefined_default_acl!()","updated_at()","upload_multipart()","upload_resumable()","url()","url()","verify_chunk_size!()","verify_file!()","where()","write()","writers()","writers()","writers()","changelog","contributing","readme"],"longSearchIndex":["gcloud","gcloud::backoff","gcloud::datastore","gcloud::datastore::apierror","gcloud::datastore::dataset","gcloud::datastore::dataset::lookupresults","gcloud::datastore::dataset::queryresults","gcloud::datastore::entity","gcloud::datastore::error","gcloud::datastore::key","gcloud::datastore::keyfileerror","gcloud::datastore::properties","gcloud::datastore::propertyerror","gcloud::datastore::proto","gcloud::datastore::proto::key","gcloud::datastore::query","gcloud::datastore::transaction","gcloud::datastore::transactionerror","gcloud::error","gcloud::storage","gcloud::storage::apierror","gcloud::storage::bucket","gcloud::storage::bucket::acl","gcloud::storage::bucket::defaultacl","gcloud::storage::bucket::list","gcloud::storage::error","gcloud::storage::file","gcloud::storage::file::acl","gcloud::storage::file::list","gcloud::storage::file::signer","gcloud::storage::fileverificationerror","gcloud::storage::project","gcloud::datastore::entity#[]()","gcloud::datastore::properties#[]()","gcloud::datastore::entity#[]=()","gcloud::datastore::properties#[]=()","gcloud::storage::bucket#acl()","gcloud::storage::file#acl()","gcloud::storage::bucket::acl#add_owner()","gcloud::storage::bucket::defaultacl#add_owner()","gcloud::storage::file::acl#add_owner()","gcloud::storage::bucket::acl#add_reader()","gcloud::storage::bucket::defaultacl#add_reader()","gcloud::storage::file::acl#add_reader()","gcloud::storage::bucket::acl#add_writer()","gcloud::storage::bucket::defaultacl#add_writer()","gcloud::storage::file::acl#add_writer()","gcloud::datastore::dataset#allocate_ids()","gcloud::datastore::query#ancestor()","gcloud::storage::file::signer#apply_option_defaults()","gcloud::storage::bucket::acl#auth!()","gcloud::storage::bucket::defaultacl#auth!()","gcloud::storage::file::acl#auth!()","gcloud::storage::bucket::acl#auth_read!()","gcloud::storage::bucket::defaultacl#auth_read!()","gcloud::storage::file::acl#auth_read!()","gcloud::storage::bucket::acl#authenticated!()","gcloud::storage::bucket::defaultacl#authenticated!()","gcloud::storage::file::acl#authenticated!()","gcloud::storage::bucket::acl#authenticatedread!()","gcloud::storage::bucket::defaultacl#authenticatedread!()","gcloud::storage::file::acl#authenticatedread!()","gcloud::storage::bucket::acl#authenticated_read!()","gcloud::storage::bucket::defaultacl#authenticated_read!()","gcloud::storage::file::acl#authenticated_read!()","gcloud::datastore::transaction#begin_transaction()","gcloud::storage::file#bucket()","gcloud::storage::bucket::defaultacl#bucketownerfullcontrol!()","gcloud::storage::file::acl#bucketownerfullcontrol!()","gcloud::storage::bucket::defaultacl#bucketownerread!()","gcloud::storage::file::acl#bucketownerread!()","gcloud::storage::project#buckets()","gcloud::datastore::transaction#commit()","gcloud::datastore::key#complete?()","gcloud::storage::file#copy()","gcloud::storage::file#crc32c()","gcloud::storage::project#create_bucket()","gcloud::storage::bucket#create_file()","gcloud::storage::bucket#created_at()","gcloud::datastore::query#cursor()","gcloud::datastore()","gcloud::storage::bucket#default_acl()","gcloud::datastore::dataset#delete()","gcloud::datastore::properties#delete()","gcloud::datastore::transaction#delete()","gcloud::storage::bucket#delete()","gcloud::storage::bucket::acl#delete()","gcloud::storage::bucket::defaultacl#delete()","gcloud::storage::file#delete()","gcloud::storage::file::acl#delete()","gcloud::storage::file#download()","gcloud::datastore::proto::key#dup()","gcloud::datastore::properties#each()","gcloud::storage::bucket#ensure_connection!()","gcloud::storage::file#ensure_connection!()","gcloud::datastore::properties#ensure_key_type()","gcloud::datastore::properties#ensure_value_type()","gcloud::storage::bucket::acl#entities_from_acls()","gcloud::storage::bucket::defaultacl#entities_from_acls()","gcloud::storage::file::acl#entities_from_acls()","gcloud::storage::file#etag()","gcloud::datastore::entity#exclude_from_indexes!()","gcloud::datastore::entity#exclude_from_indexes?()","gcloud::datastore::properties#exist?()","gcloud::storage::file::signer#ext_path()","gcloud::storage::file::signer#ext_url()","gcloud::datastore::properties#fetch()","gcloud::storage::bucket#files()","gcloud::datastore::query#filter()","gcloud::datastore::dataset#find()","gcloud::datastore::dataset#find_all()","gcloud::storage::project#find_bucket()","gcloud::storage::bucket#find_file()","gcloud::storage::file#fix_copy_args()","gcloud::storage::file#generation()","gcloud::datastore::dataset#get()","gcloud::datastore::query#group_by()","gcloud::storage::bucket#id()","gcloud::storage::file#id()","gcloud::datastore::key#incomplete?()","gcloud::storage::file::signer#issuer()","gcloud::datastore::entity#key=()","gcloud::datastore::query#kind()","gcloud::storage::bucket#kind()","gcloud::storage::file#kind()","gcloud::datastore::query#limit()","gcloud::storage::bucket#location()","gcloud::datastore::dataset#lookup()","gcloud::storage::file#md5()","gcloud::storage::file#metageneration()","gcloud::datastore::dataset::queryresults#more_after_limit?()","gcloud::storage::bucket#name()","gcloud::storage::file#name()","gcloud::datastore::apierror::new()","gcloud::datastore::dataset::lookupresults::new()","gcloud::datastore::dataset::queryresults::new()","gcloud::datastore::entity::new()","gcloud::datastore::key::new()","gcloud::datastore::properties::new()","gcloud::datastore::query::new()","gcloud::datastore::transactionerror::new()","gcloud::storage::apierror::new()","gcloud::storage::bucket::new()","gcloud::storage::bucket::list::new()","gcloud::storage::file::new()","gcloud::storage::file::list::new()","gcloud::storage::file::signer::new()","gcloud::datastore::dataset::queryresults#no_more?()","gcloud::datastore::dataset::queryresults#not_finished?()","gcloud::datastore::query#offset()","gcloud::datastore::query#order()","gcloud::storage::bucket::defaultacl#owner_full!()","gcloud::storage::file::acl#owner_full!()","gcloud::storage::bucket::defaultacl#owner_read!()","gcloud::storage::file::acl#owner_read!()","gcloud::storage::bucket::acl#owners()","gcloud::storage::bucket::defaultacl#owners()","gcloud::storage::file::acl#owners()","gcloud::datastore::key#path()","gcloud::datastore::entity#persisted?()","gcloud::storage::bucket::acl::predefined_rule_for()","gcloud::storage::bucket::defaultacl::predefined_rule_for()","gcloud::storage::file::acl::predefined_rule_for()","gcloud::storage::bucket::acl#private!()","gcloud::storage::bucket::defaultacl#private!()","gcloud::storage::file::acl#private!()","gcloud::datastore::dataset#project()","gcloud::storage::project#project()","gcloud::storage::bucket::acl#projectprivate!()","gcloud::storage::bucket::defaultacl#projectprivate!()","gcloud::storage::file::acl#projectprivate!()","gcloud::storage::bucket::acl#project_private!()","gcloud::storage::bucket::defaultacl#project_private!()","gcloud::storage::file::acl#project_private!()","gcloud::datastore::query#projection()","gcloud::storage::bucket::acl#public!()","gcloud::storage::bucket::defaultacl#public!()","gcloud::storage::file::acl#public!()","gcloud::storage::bucket::acl#publicread!()","gcloud::storage::bucket::defaultacl#publicread!()","gcloud::storage::file::acl#publicread!()","gcloud::storage::bucket::acl#publicreadwrite!()","gcloud::storage::bucket::acl#public_read!()","gcloud::storage::bucket::defaultacl#public_read!()","gcloud::storage::file::acl#public_read!()","gcloud::storage::bucket::acl#public_write!()","gcloud::datastore::properties#read()","gcloud::storage::bucket::acl#readers()","gcloud::storage::bucket::defaultacl#readers()","gcloud::storage::file::acl#readers()","gcloud::storage::bucket::acl#refresh!()","gcloud::storage::bucket::defaultacl#refresh!()","gcloud::storage::file::acl#refresh!()","gcloud::datastore::transaction#reset!()","gcloud::storage::resumable_threshold()","gcloud::storage::resumable_threshold=()","gcloud::datastore::transaction#rollback()","gcloud::datastore::dataset#run()","gcloud::datastore::dataset#run_query()","gcloud::datastore::dataset#save()","gcloud::datastore::transaction#save()","gcloud::datastore::query#select()","gcloud::storage::file::signer#signature_str()","gcloud::storage::file#signed_url()","gcloud::storage::file::signer#signed_url()","gcloud::storage::file::signer#signing_key()","gcloud::storage::file#size()","gcloud::datastore::query#start()","gcloud::datastore::transaction#start()","gcloud::storage()","gcloud::datastore::dataset#to_gcloud_entities()","gcloud::datastore::dataset#to_gcloud_keys()","gcloud::datastore::properties#to_h()","gcloud::datastore::properties#to_hash()","gcloud::datastore::dataset#transaction()","gcloud::storage::bucket::acl#update_predefined_acl!()","gcloud::storage::file::acl#update_predefined_acl!()","gcloud::storage::bucket::defaultacl#update_predefined_default_acl!()","gcloud::storage::file#updated_at()","gcloud::storage::bucket#upload_multipart()","gcloud::storage::bucket#upload_resumable()","gcloud::storage::bucket#url()","gcloud::storage::file#url()","gcloud::storage::bucket#verify_chunk_size!()","gcloud::storage::file#verify_file!()","gcloud::datastore::query#where()","gcloud::datastore::properties#write()","gcloud::storage::bucket::acl#writers()","gcloud::storage::bucket::defaultacl#writers()","gcloud::storage::file::acl#writers()","","",""],"info":[["Gcloud","","Gcloud.html","","<p>Copyright 2014 Google Inc. All rights reserved.\n<p>Licensed under the Apache License, Version 2.0 (the “License”); …\n"],["Gcloud::Backoff","","Gcloud/Backoff.html","","<p>Backoff allows users to control how Google API calls are retried. If an API\ncall fails the response will …\n"],["Gcloud::Datastore","","Gcloud/Datastore.html","","<p>Google Cloud Datastore\n\n<pre>dataset = Gcloud.datastore &quot;my-todo-project&quot;,\n                           &quot;/path/to/keyfile.json&quot; ...</pre>\n"],["Gcloud::Datastore::ApiError","","Gcloud/Datastore/ApiError.html","","<p>Raised when an API call is not successful.\n"],["Gcloud::Datastore::Dataset","","Gcloud/Datastore/Dataset.html","","<p>Dataset is the data saved in a project&#39;s Datastore. Dataset is\nanalogous to a database in relational …\n"],["Gcloud::Datastore::Dataset::LookupResults","","Gcloud/Datastore/Dataset/LookupResults.html","","<p>LookupResults is a special case Array with additional values. A\nLookupResults object is returned from …\n"],["Gcloud::Datastore::Dataset::QueryResults","","Gcloud/Datastore/Dataset/QueryResults.html","","<p>QueryResults is a special case Array with additional values. A QueryResults\nobject is returned from  …\n"],["Gcloud::Datastore::Entity","","Gcloud/Datastore/Entity.html","","<p>Entity represents the Datastore record. Every Entity has a Key, and a list\nof properties.\n\n<pre>entity = Gcloud::Datastore::Entity.new ...</pre>\n"],["Gcloud::Datastore::Error","","Gcloud/Datastore/Error.html","","<p>Base Datastore exception class.\n"],["Gcloud::Datastore::Key","","Gcloud/Datastore/Key.html","","<p>Datastore Key\n<p>Every Datastore record has an identifying key, which includes the\nrecord&#39;s entity kind …\n"],["Gcloud::Datastore::KeyfileError","","Gcloud/Datastore/KeyfileError.html","","<p>Raised when a keyfile is not correct.\n"],["Gcloud::Datastore::Properties","","Gcloud/Datastore/Properties.html","","<p>Properties\n"],["Gcloud::Datastore::PropertyError","","Gcloud/Datastore/PropertyError.html","","<p>Raised when a property is not correct.\n"],["Gcloud::Datastore::Proto","","Gcloud/Datastore/Proto.html","",""],["Gcloud::Datastore::Proto::Key","","Gcloud/Datastore/Proto/Key.html","",""],["Gcloud::Datastore::Query","","Gcloud/Datastore/Query.html","","<p>Query represents a query to be made to the Datastore.\n\n<pre>query = Gcloud::Datastore::Query.new\nquery.kind(&quot;Task&quot;). ...</pre>\n"],["Gcloud::Datastore::Transaction","","Gcloud/Datastore/Transaction.html","","<p>Special Connection instance for running transactions.\n<p>See Gcloud::Datastore::Dataset.transaction\n"],["Gcloud::Datastore::TransactionError","","Gcloud/Datastore/TransactionError.html","","<p>General error for Transaction problems.\n"],["Gcloud::Error","","Gcloud/Error.html","","<p>Base Gcloud exception class.\n"],["Gcloud::Storage","","Gcloud/Storage.html","","<p>Google Cloud Storage\n\n<pre>storage = Gcloud.storage &quot;my-todo-project&quot;,\n                         &quot;/path/to/keyfile.json&quot; ...</pre>\n"],["Gcloud::Storage::ApiError","","Gcloud/Storage/ApiError.html","","<p>Raised when an API call is not successful.\n"],["Gcloud::Storage::Bucket","","Gcloud/Storage/Bucket.html","","<p>Represents a Bucket. Belongs to a Project and has many Files.\n"],["Gcloud::Storage::Bucket::Acl","","Gcloud/Storage/Bucket/Acl.html","","<p>Represents a Bucket&#39;s Access Control List.\n"],["Gcloud::Storage::Bucket::DefaultAcl","","Gcloud/Storage/Bucket/DefaultAcl.html","","<p>Represents a Bucket&#39;s Default Access Control List.\n"],["Gcloud::Storage::Bucket::List","","Gcloud/Storage/Bucket/List.html","","<p>Bucket::List is a special case Array with additional values.\n"],["Gcloud::Storage::Error","","Gcloud/Storage/Error.html","","<p>Base Storage exception class.\n"],["Gcloud::Storage::File","","Gcloud/Storage/File.html","","<p>Represents the File/Object that belong to a Bucket.\n"],["Gcloud::Storage::File::Acl","","Gcloud/Storage/File/Acl.html","","<p>Represents a File&#39;s Access Control List.\n"],["Gcloud::Storage::File::List","","Gcloud/Storage/File/List.html","","<p>File::List is a special case Array with additional values.\n"],["Gcloud::Storage::File::Signer","","Gcloud/Storage/File/Signer.html","","<p>Create a signed_url for a file.\n"],["Gcloud::Storage::FileVerificationError","","Gcloud/Storage/FileVerificationError.html","","<p>Raised when a File download fails the verification.\n"],["Gcloud::Storage::Project","","Gcloud/Storage/Project.html","","<p>Represents the Project that the Buckets and Files belong to.\n<p>Gcloud::Storage::Project is the main object …\n"],["[]","Gcloud::Datastore::Entity","Gcloud/Datastore/Entity.html#method-i-5B-5D","(prop_name)","<p>Retrieve a property value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">entity</span>[<span class=\"ruby-string\">&quot;name&quot;</span>]\n</pre>\n<p>If a property doesn&#39;t exist then nil will be returned. …\n"],["[]","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-5B-5D","(key)",""],["[]=","Gcloud::Datastore::Entity","Gcloud/Datastore/Entity.html#method-i-5B-5D-3D","(prop_name, prop_value)","<p>Set a property value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">entity</span>[<span class=\"ruby-string\">&quot;name&quot;</span>] = <span class=\"ruby-string\">&quot;User McUser&quot;</span>\n</pre>\n"],["[]=","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-5B-5D-3D","(key, value)",""],["acl","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-acl","()","<p>Access Control List\n"],["acl","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-acl","()","<p>Access Control List\n"],["add_owner","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-add_owner","(entity)",""],["add_owner","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-add_owner","(entity)",""],["add_owner","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-add_owner","(entity, options = {})",""],["add_reader","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-add_reader","(entity)",""],["add_reader","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-add_reader","(entity)",""],["add_reader","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-add_reader","(entity, options = {})",""],["add_writer","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-add_writer","(entity)",""],["add_writer","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-add_writer","(entity)",""],["add_writer","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-add_writer","(entity, options = {})",""],["allocate_ids","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-allocate_ids","(incomplete_key, count = 1)","<p>Generate IDs for a Key before creating an entity.\n\n<pre>dataset = Gcloud.datastore\nempty_key = Gcloud::Datastore::Key.new ...</pre>\n"],["ancestor","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-ancestor","(parent)","<p>Add a filter for entities that inherit from a key.\n\n<pre>query = Gcloud::Datastore::Query.new\nquery.kind(&quot;Task&quot;). ...</pre>\n"],["apply_option_defaults","Gcloud::Storage::File::Signer","Gcloud/Storage/File/Signer.html#method-i-apply_option_defaults","(options)",""],["auth!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-auth-21","()","<p>Predefined ACL helpers\n"],["auth!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-auth-21","()","<p>Predefined ACL helpers\n"],["auth!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-auth-21","()","<p>Predefined ACL helpers\n"],["auth_read!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-auth_read-21","()",""],["auth_read!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-auth_read-21","()",""],["auth_read!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-auth_read-21","()",""],["authenticated!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-authenticated-21","()",""],["authenticated!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-authenticated-21","()",""],["authenticated!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-authenticated-21","()",""],["authenticatedRead!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-authenticatedRead-21","()",""],["authenticatedRead!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-authenticatedRead-21","()",""],["authenticatedRead!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-authenticatedRead-21","()",""],["authenticated_read!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-authenticated_read-21","()",""],["authenticated_read!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-authenticated_read-21","()",""],["authenticated_read!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-authenticated_read-21","()",""],["begin_transaction","Gcloud::Datastore::Transaction","Gcloud/Datastore/Transaction.html#method-i-begin_transaction","()",""],["bucket","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-bucket","()","<p>The name of the bucket containing this file.\n"],["bucketOwnerFullControl!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-bucketOwnerFullControl-21","()",""],["bucketOwnerFullControl!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-bucketOwnerFullControl-21","()",""],["bucketOwnerRead!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-bucketOwnerRead-21","()",""],["bucketOwnerRead!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-bucketOwnerRead-21","()",""],["buckets","Gcloud::Storage::Project","Gcloud/Storage/Project.html#method-i-buckets","(options = {})","<p>Retrieves a list of buckets for the given project.\n\n<pre>storage = Gcloud.storage\nbuckets = storage.buckets ...</pre>\n"],["commit","Gcloud::Datastore::Transaction","Gcloud/Datastore/Transaction.html#method-i-commit","()","<p>Commits a transaction.\n"],["complete?","Gcloud::Datastore::Key","Gcloud/Datastore/Key.html#method-i-complete-3F","()","<p>Determine if the key is complete. A complete key has either an id or a\nname.\n"],["copy","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-copy","(dest_bucket_or_path, dest_path = nil, options = {})","<p>Copy the file to a new location.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">file</span>.<span class=\"ruby-identifier\">copy</span> <span class=\"ruby-string\">&quot;path/to/destination/file.ext&quot;</span>\n</pre>\n<p>The file can also be copied to …\n"],["crc32c","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-crc32c","()","<p>CRC32c checksum, as described in RFC 4960, Appendix B; encoded using\nbase64.\n"],["create_bucket","Gcloud::Storage::Project","Gcloud/Storage/Project.html#method-i-create_bucket","(bucket_name, options = {})","<p>Creates a new bucket.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">bucket</span> = <span class=\"ruby-identifier\">project</span>.<span class=\"ruby-identifier\">create_bucket</span> <span class=\"ruby-string\">&quot;my-bucket&quot;</span>\n</pre>\n<p>The API call to create the bucket may …\n"],["create_file","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-create_file","(file, path = nil, options = {})","<p>Create a new Gcloud::Storeage::File object by providing a File object to\nupload and the path to store …\n"],["created_at","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-created_at","()","<p>Creation time of the bucket.\n"],["cursor","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-cursor","(cursor)",""],["datastore","Gcloud","Gcloud.html#method-c-datastore","(project = ENV[\"DATASTORE_PROJECT\"], keyfile = nil)","<p>Create a new Gcloud::Datastore::Dataset.\n\n<pre>entity = Gcloud::Datastore::Entity.new\nentity.key = Gcloud::Datastore::Key.new ...</pre>\n"],["default_acl","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-default_acl","()","<p>Default Access Control List\n"],["delete","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-delete","(*entities_or_keys)","<p>Remove entities from the Datastore. Accepts Entity and Key objects.\n\n<pre>dataset = Gcloud.datastore\ndataset.delete ...</pre>\n"],["delete","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-delete","(key, &block)",""],["delete","Gcloud::Datastore::Transaction","Gcloud/Datastore/Transaction.html#method-i-delete","(*entities)","<p>Remove entities in a transaction.\n\n<pre>dataset.transaction do |tx|\n  if tx.find(user.key).nil?\n    tx.delete ...</pre>\n"],["delete","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-delete","(options = {})","<p>Permenently deletes the bucket. The bucket must be empty.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">bucket</span>.<span class=\"ruby-identifier\">delete</span>\n</pre>\n<p>The API call to delete the bucket …\n"],["delete","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-delete","(entity)",""],["delete","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-delete","(entity)",""],["delete","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-delete","()","<p>Permenently deletes the file.\n"],["delete","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-delete","(entity, options = {})",""],["download","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-download","(path, options = {})","<p>Download the file&#39;s contents to a local file. The path provided must be\nwritable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">file</span>.<span class=\"ruby-identifier\">download</span> <span class=\"ruby-string\">&quot;path/to/downloaded/file.ext&quot;</span>\n</pre>\n"],["dup","Gcloud::Datastore::Proto::Key","Gcloud/Datastore/Proto/Key.html#method-i-dup","()",""],["each","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-each","(&block)",""],["ensure_connection!","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-ensure_connection-21","()","<p>Raise an error unless an active connection is available.\n"],["ensure_connection!","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-ensure_connection-21","()","<p>Raise an error unless an active connection is available.\n"],["ensure_key_type","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-ensure_key_type","(key)","<p>Ensures the key is the proper type, otherwise a PropertyError is raised.\n"],["ensure_value_type","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-ensure_value_type","(value)","<p>Ensures the value is a type that can be persisted, otherwise a\nPropertyError is raised.\n"],["entities_from_acls","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-entities_from_acls","(acls, role)",""],["entities_from_acls","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-entities_from_acls","(acls, role)",""],["entities_from_acls","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-entities_from_acls","(acls, role)",""],["etag","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-etag","()","<p>HTTP 1.1 Entity tag for the file.\n"],["exclude_from_indexes!","Gcloud::Datastore::Entity","Gcloud/Datastore/Entity.html#method-i-exclude_from_indexes-21","(name, flag = nil, &block)","<p>Flag a property to be excluded from the Datastore indexes. Setting true\nwill exclude the property from …\n"],["exclude_from_indexes?","Gcloud::Datastore::Entity","Gcloud/Datastore/Entity.html#method-i-exclude_from_indexes-3F","(name)","<p>Indicates if a property is flagged to be excluded from the Datastore\nindexes. The default value is false. …\n"],["exist?","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-exist-3F","(key)",""],["ext_path","Gcloud::Storage::File::Signer","Gcloud/Storage/File/Signer.html#method-i-ext_path","()","<p>The external path to the file.\n"],["ext_url","Gcloud::Storage::File::Signer","Gcloud/Storage/File/Signer.html#method-i-ext_url","()","<p>The external url to the file.\n"],["fetch","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-fetch","(key, &_block)",""],["files","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-files","(options = {})","<p>Retrieves a list of files matching the criteria.\n\n<pre>storage = Gcloud.storage\nbucket = storage.find_bucket ...</pre>\n"],["filter","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-filter","(name, operator, value)",""],["find","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-find","(key_or_kind, id_or_name = nil)","<p>Retrieve an entity by providing key information. Either a Key object or\nkind and id/name can be provided. …\n"],["find_all","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-find_all","(*keys)","<p>Retrieve the entities for the provided keys.\n\n<pre>dataset = Gcloud.datastore\nkey1 = Gcloud::Datastore::Key.new ...</pre>\n"],["find_bucket","Gcloud::Storage::Project","Gcloud/Storage/Project.html#method-i-find_bucket","(bucket_name)","<p>Retrieves bucket by name.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">storage</span> = <span class=\"ruby-constant\">Gcloud</span>.<span class=\"ruby-identifier\">storage</span>\n<span class=\"ruby-identifier\">bucket</span> = <span class=\"ruby-identifier\">storage</span>.<span class=\"ruby-identifier\">find_bucket</span> <span class=\"ruby-string\">&quot;my-bucket&quot;</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">bucket</span>.<span class=\"ruby-identifier\">name</span>\n</pre>\n"],["find_file","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-find_file","(path, options = {})","<p>Retrieves a file matching the path.\n\n<pre>storage = Gcloud.storage\nbucket = storage.find_bucket &quot;my-bucket&quot; ...</pre>\n"],["fix_copy_args","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-fix_copy_args","(dest_bucket, dest_path, options = {})",""],["generation","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-generation","()","<p>The content generation of this file. Used for object versioning.\n"],["get","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-get","(key_or_kind, id_or_name = nil)",""],["group_by","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-group_by","(*names)","<p>Group results by a list of properties.\n\n<pre>query = Gcloud::Datastore::Query.new\nquery.kind(&quot;Task&quot;).\n  group_by(&quot;completed&quot;) ...</pre>\n"],["id","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-id","()","<p>The ID of the bucket.\n"],["id","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-id","()","<p>The ID of the file.\n"],["incomplete?","Gcloud::Datastore::Key","Gcloud/Datastore/Key.html#method-i-incomplete-3F","()","<p>Determine if the key is incomplete. An incomplete key has neither an id nor\na name.\n"],["issuer","Gcloud::Storage::File::Signer","Gcloud/Storage/File/Signer.html#method-i-issuer","()",""],["key=","Gcloud::Datastore::Entity","Gcloud/Datastore/Entity.html#method-i-key-3D","(new_key)","<p>Sets the Key that identifies the entity. This can only be set before the\nentity is saved. Once the entity …\n"],["kind","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-kind","(*kinds)","<p>Add the kind of entities to query.\n\n<pre>query = Gcloud::Datastore::Query.new\nquery.kind &quot;Task&quot;\n\nall_tasks = ...</pre>\n"],["kind","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-kind","()","<p>The kind of item this is. For buckets, this is always storage#bucket.\n"],["kind","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-kind","()","<p>The kind of item this is. For files, this is always storage#object.\n"],["limit","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-limit","(num)","<p>Set a limit on the number of results to be returned.\n\n<pre>query = Gcloud::Datastore::Query.new\nquery.kind(&quot;Task&quot;). ...</pre>\n"],["location","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-location","()","<p>The location of the bucket. Object data for objects in the bucket resides\nin physical storage within …\n"],["lookup","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-lookup","(*keys)",""],["md5","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-md5","()","<p>MD5 hash of the data; encoded using base64.\n"],["metageneration","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-metageneration","()","<p>The version of the metadata for this file at this generation. Used for\npreconditions and for detecting …\n"],["more_after_limit?","Gcloud::Datastore::Dataset::QueryResults","Gcloud/Datastore/Dataset/QueryResults.html#method-i-more_after_limit-3F","()","<p>Convenience method for determining id the more_results value is\n“MORE_RESULTS_AFTER_LIMIT” …\n"],["name","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-name","()","<p>The name of the bucket.\n"],["name","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-name","()","<p>The name of this file.\n"],["new","Gcloud::Datastore::ApiError","Gcloud/Datastore/ApiError.html#method-c-new","(method, response = nil)",""],["new","Gcloud::Datastore::Dataset::LookupResults","Gcloud/Datastore/Dataset/LookupResults.html#method-c-new","(arr = [], deferred = [], missing = [])","<p>Create a new LookupResults with an array of values.\n"],["new","Gcloud::Datastore::Dataset::QueryResults","Gcloud/Datastore/Dataset/QueryResults.html#method-c-new","(arr = [], cursor = nil, more_results = nil)","<p>Create a new QueryResults with an array of values.\n"],["new","Gcloud::Datastore::Entity","Gcloud/Datastore/Entity.html#method-c-new","()","<p>Create a new Entity object.\n"],["new","Gcloud::Datastore::Key","Gcloud/Datastore/Key.html#method-c-new","(kind = nil, id_or_name = nil)",""],["new","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-c-new","(properties = {})",""],["new","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-c-new","()","<p>Returns a new query object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">query</span> = <span class=\"ruby-constant\">Gcloud</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Datastore</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Query</span>.<span class=\"ruby-identifier\">new</span>\n</pre>\n"],["new","Gcloud::Datastore::TransactionError","Gcloud/Datastore/TransactionError.html#method-c-new","(message, inner = nil)",""],["new","Gcloud::Storage::ApiError","Gcloud/Storage/ApiError.html#method-c-new","(message, code, errors)",""],["new","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-c-new","()","<p>Create an empty Bucket object.\n"],["new","Gcloud::Storage::Bucket::List","Gcloud/Storage/Bucket/List.html#method-c-new","(arr = [], token = nil)","<p>Create a new Bucket::List with an array of values.\n"],["new","Gcloud::Storage::File","Gcloud/Storage/File.html#method-c-new","()","<p>Create an empty File object.\n"],["new","Gcloud::Storage::File::List","Gcloud/Storage/File/List.html#method-c-new","(arr = [], token = nil, prefixes = [])","<p>Create a new File::List with an array of values.\n"],["new","Gcloud::Storage::File::Signer","Gcloud/Storage/File/Signer.html#method-c-new","(file)",""],["no_more?","Gcloud::Datastore::Dataset::QueryResults","Gcloud/Datastore/Dataset/QueryResults.html#method-i-no_more-3F","()","<p>Convenience method for determining id the more_results value is\n“NO_MORE_RESULTS”\n"],["not_finished?","Gcloud::Datastore::Dataset::QueryResults","Gcloud/Datastore/Dataset/QueryResults.html#method-i-not_finished-3F","()","<p>Convenience method for determining id the more_results value is\n“NOT_FINISHED”\n"],["offset","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-offset","(num)","<p>Set an offset for the results to be returned.\n\n<pre>query = Gcloud::Datastore::Query.new\nquery.kind(&quot;Task&quot;). ...</pre>\n"],["order","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-order","(name, direction = :asc)","<p>Sort the results by a property name. By default, an ascending sort order\nwill be used. To sort in descending …\n"],["owner_full!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-owner_full-21","()",""],["owner_full!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-owner_full-21","()",""],["owner_read!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-owner_read-21","()",""],["owner_read!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-owner_read-21","()",""],["owners","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-owners","()",""],["owners","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-owners","()",""],["owners","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-owners","()",""],["path","Gcloud::Datastore::Key","Gcloud/Datastore/Key.html#method-i-path","()","<p>Represent the Key&#39;s path (including parent) as an array of arrays. Each\ninner array contains two …\n"],["persisted?","Gcloud::Datastore::Entity","Gcloud/Datastore/Entity.html#method-i-persisted-3F","()","<p>Returns true if the record is persisted to the datastore. Otherwise returns\nfalse.\n"],["predefined_rule_for","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-c-predefined_rule_for","(rule_name)",""],["predefined_rule_for","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-c-predefined_rule_for","(rule_name)",""],["predefined_rule_for","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-c-predefined_rule_for","(rule_name)",""],["private!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-private-21","()",""],["private!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-private-21","()",""],["private!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-private-21","()",""],["project","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-project","()","<p>The project connected to.\n"],["project","Gcloud::Storage::Project","Gcloud/Storage/Project.html#method-i-project","()","<p>The project identifier.\n"],["projectPrivate!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-projectPrivate-21","()",""],["projectPrivate!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-projectPrivate-21","()",""],["projectPrivate!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-projectPrivate-21","()",""],["project_private!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-project_private-21","()",""],["project_private!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-project_private-21","()",""],["project_private!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-project_private-21","()",""],["projection","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-projection","(*names)",""],["public!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-public-21","()",""],["public!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-public-21","()",""],["public!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-public-21","()",""],["publicRead!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-publicRead-21","()",""],["publicRead!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-publicRead-21","()",""],["publicRead!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-publicRead-21","()",""],["publicReadWrite!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-publicReadWrite-21","()",""],["public_read!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-public_read-21","()",""],["public_read!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-public_read-21","()",""],["public_read!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-public_read-21","()",""],["public_write!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-public_write-21","()",""],["read","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-read","(key)",""],["readers","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-readers","()",""],["readers","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-readers","()",""],["readers","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-readers","()",""],["refresh!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-refresh-21","()",""],["refresh!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-refresh-21","()",""],["refresh!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-refresh-21","()",""],["reset!","Gcloud::Datastore::Transaction","Gcloud/Datastore/Transaction.html#method-i-reset-21","()","<p>Reset the transaction. Transaction#start must be called afterwards.\n"],["resumable_threshold","Gcloud::Storage","Gcloud/Storage.html#method-c-resumable_threshold","()","<p>Retrieve resumable threshold. If uploads are larger in size than this value\nthen resumable uploads are …\n"],["resumable_threshold=","Gcloud::Storage","Gcloud/Storage.html#method-c-resumable_threshold-3D","(new_resumable_threshold)","<p>Sets a new resumable threshold value.\n"],["rollback","Gcloud::Datastore::Transaction","Gcloud/Datastore/Transaction.html#method-i-rollback","()","<p>Rolls a transaction back.\n"],["run","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-run","(query)","<p>Retrieve entities specified by a Query.\n\n<pre>query = Gcloud::Datastore::Query.new.kind(&quot;Task&quot;).\n  where(&quot;completed&quot;, ...</pre>\n"],["run_query","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-run_query","(query)",""],["save","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-save","(*entities)","<p>Persist entities to the Datastore.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">dataset</span> = <span class=\"ruby-constant\">Gcloud</span>.<span class=\"ruby-identifier\">datastore</span>\n<span class=\"ruby-identifier\">dataset</span>.<span class=\"ruby-identifier\">save</span> <span class=\"ruby-identifier\">task1</span>, <span class=\"ruby-identifier\">task2</span>\n</pre>\n"],["save","Gcloud::Datastore::Transaction","Gcloud/Datastore/Transaction.html#method-i-save","(*entities)","<p>Persist entities in a transaction.\n\n<pre>dataset.transaction do |tx|\n  if tx.find(user.key).nil?\n    tx.save ...</pre>\n"],["select","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-select","(*names)","<p>Retrieve only select properties from the matched entities.\n\n<pre>query = Gcloud::Datastore::Query.new\nquery.kind(&quot;Task&quot;). ...</pre>\n"],["signature_str","Gcloud::Storage::File::Signer","Gcloud/Storage/File/Signer.html#method-i-signature_str","(options)",""],["signed_url","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-signed_url","(options = {})",""],["signed_url","Gcloud::Storage::File::Signer","Gcloud/Storage/File/Signer.html#method-i-signed_url","(options)",""],["signing_key","Gcloud::Storage::File::Signer","Gcloud/Storage/File/Signer.html#method-i-signing_key","()",""],["size","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-size","()","<p>Content-Length of the data in bytes.\n"],["start","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-start","(cursor)","<p>Set the cursor to start the results at.\n\n<pre>query = Gcloud::Datastore::Query.new\nquery.kind(&quot;Task&quot;).\n  limit(10). ...</pre>\n"],["start","Gcloud::Datastore::Transaction","Gcloud/Datastore/Transaction.html#method-i-start","()","<p>Begins a transaction. This method is run when a new Transaction is created.\n"],["storage","Gcloud","Gcloud.html#method-c-storage","(project = ENV[\"STORAGE_PROJECT\"], keyfile = nil)","<p>Create a new Storage project.\n\n<pre>storage = Gcloud.storage &quot;my-todo-project&quot;,\n                         &quot;/path/to/keyfile.json&quot; ...</pre>\n"],["to_gcloud_entities","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-to_gcloud_entities","(proto_results)","<p>Convenince method to convert proto entities to Gcloud entities.\n"],["to_gcloud_keys","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-to_gcloud_keys","(proto_results)","<p>Convenince method to convert proto keys to Gcloud keys.\n"],["to_h","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-to_h","()",""],["to_hash","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-to_hash","()",""],["transaction","Gcloud::Datastore::Dataset","Gcloud/Datastore/Dataset.html#method-i-transaction","()","<p>Runs the given block in a database transaction. If no block is given the\ntransaction object is returned. …\n"],["update_predefined_acl!","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-update_predefined_acl-21","(acl_role)",""],["update_predefined_acl!","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-update_predefined_acl-21","(acl_role)",""],["update_predefined_default_acl!","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-update_predefined_default_acl-21","(acl_role)",""],["updated_at","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-updated_at","()","<p>The creation or modification time of the file. For buckets with versioning\nenabled, changing an object&#39;s …\n"],["upload_multipart","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-upload_multipart","(file, path, options = {})",""],["upload_resumable","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-upload_resumable","(file, path, chunk_size, options = {})",""],["url","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-url","()","<p>The URI of this bucket.\n"],["url","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-url","()","<p>The url to the file.\n"],["verify_chunk_size!","Gcloud::Storage::Bucket","Gcloud/Storage/Bucket.html#method-i-verify_chunk_size-21","(chunk_size)","<p>Determines if a chunk_size is valid.\n"],["verify_file!","Gcloud::Storage::File","Gcloud/Storage/File.html#method-i-verify_file-21","(file, options = {})",""],["where","Gcloud::Datastore::Query","Gcloud/Datastore/Query.html#method-i-where","(name, operator, value)","<p>Add a property filter to the query.\n\n<pre>query = Gcloud::Datastore::Query.new\nquery.kind(&quot;Task&quot;).\n  where(&quot;completed&quot;, ...</pre>\n"],["write","Gcloud::Datastore::Properties","Gcloud/Datastore/Properties.html#method-i-write","(key, value)",""],["writers","Gcloud::Storage::Bucket::Acl","Gcloud/Storage/Bucket/Acl.html#method-i-writers","()",""],["writers","Gcloud::Storage::Bucket::DefaultAcl","Gcloud/Storage/Bucket/DefaultAcl.html#method-i-writers","()",""],["writers","Gcloud::Storage::File::Acl","Gcloud/Storage/File/Acl.html#method-i-writers","()",""],["CHANGELOG","","CHANGELOG_md.html","","<p>Release History\n<p>0.1.0 / 2015-03-31\n<p>Initial release supporting Datastore and Storage services.\n"],["CONTRIBUTING","","CONTRIBUTING_md.html","","<p>Contributing to Gcloud\n<p><strong>Sign one of the contributor license agreements below.</strong>\n<p>Fork the repo, develop and …\n"],["README","","README_md.html","","<p>gcloud\n<p>Idiomatic Ruby client for Google Cloud Platform services.\n<p><img src=\"https://travis-ci.org/GoogleCloudPlatform/gcloud-ruby.svg\"> …\n"]]}}