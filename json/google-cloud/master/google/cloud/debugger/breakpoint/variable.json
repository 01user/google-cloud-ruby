{"id":"google/cloud/debugger/breakpoint/variable","name":"Variable","title":["Google","Cloud","Debugger","Breakpoint","Variable"],"description":"<h1 id=\"variable\">Variable</h1>\n\n<p>Represents a variable or an argument possibly of a compound object\ntype. Note how the following variables are represented:</p>\n\n<p>A simple Variable:</p>\n<pre><code class=\"language-ruby\">  x = 5\n  # Captured variable:\n  # { name: \"x\", value: \"5\", type: \"Integer\" }\n</code></pre>\n\n<p>A Compound Variable:</p>\n<pre><code class=\"language-ruby\">  class T\n    attr_accessor :m1, :m2\n    ...\n  end\n  v = T.new(1, \"2\")\n  # Captured variable:\n  # {\n  #   name: \"v\",\n  #   type: \"T\",\n  #   members: [\n  #     { name: \"@m1\", value: \"1\", type: \"Integer\" },\n  #     { name: \"@m2\", value: \"2\", type: \"String\" }\n  #   ]\n  # }\n</code></pre>\n\n<p>A Hash object:</p>\n<pre><code class=\"language-ruby\">  hash = { a: 1, b: :two }\n  # Captured variable:\n  # {\n  #   name: \"hash\",\n  #   type: \"Hash\",\n  #   members: [\n  #     { name: \"a\", value: \"1\", type: \"Integer\" },\n  #     { name: \"b\", value: \":2\", type: \"Symbol\" }\n  #   ]\n  # }\n</code></pre>\n\n<p>An Array object:</p>\n<pre><code class=\"language-ruby\">  ary = [1, nil]\n  # Captured variable:\n  # {\n  #   name: \"ary\",\n  #   type: \"Array\",\n  #   members: [\n  #     { name: \"[0]\", value: \"1\", type: \"Integer\" },\n  #     { name: \"[1]\", value: \"nil\", type: \"NilClass\" }\n  #   ]\n  # }\n</code></pre>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint/variable.rb#L79","resources":[],"examples":[],"methods":[{"id":"from_rb_var-class","type":"class","name":"from_rb_var","title":["Google","Cloud","Debugger","Breakpoint","Variable.from_rb_var"],"description":"<p>Convert a Ruby variable into a\nGoogle::Cloud::Debugger::Breakpoint::Variable object. If\na variable table is provided, it will store all the subsequently\ncreated compound variables into the variable table for sharing.</p>","source":"google-cloud-debugger/lib/google/cloud/debugger/breakpoint/variable.rb#L205","resources":[],"examples":[{"caption":"<p>Simple variable convertion</p>","code":"x = 3\nvar = Variable.from_rb_var x, name: \"x\"\nvar.name  #=> \"x\"\nvar.value #=> \"3\"\nvar.type  #=> \"Integer\""},{"caption":"<p>Hash convertion</p>","code":"hash = {a: 1, b: :two}\nvar = Variable.from_rb_var hash, name: \"hash\"\nvar.name  #=> \"hash\"\nvar.type  #=> \"Hash\"\nvar.members[0].name  #=> \"a\"\nvar.members[0].value #=> \"1\"\nvar.members[0].type  #=> \"Integer\"\nvar.members[1].name  #=> \"b\"\nvar.members[1].value #=> \"two\"\nvar.members[1].type  #=> \"Symbol\""},{"caption":"<p>Custom compound variable convertion</p>","code":"foo = Foo.new(a: 1, b: []) #=> #<Foo:0x0000 @a: 1, @b: []>\nvar_table = VariableTable.new\nvar = Variable.from_rb_var foo, name: \"foo\"\nvar.name  #=> \"foo\"\nvar.type  #=> \"Foo\"\nvar.members[0].name  #=> \"@a\"\nvar.members[0].value #=> \"1\"\nvar.members[0].type  #=> \"Integer\"\nvar.members[1].name  #=> \"@b\"\nvar.members[1].value #=> \"[]\"\nvar.members[1].type  #=> \"Array\""},{"caption":"<p>Use variable table for shared compound variables</p>","code":"hash = {a: 1}\nary = [hash, hash]\nvar_table = VariableTable.new\nvar = Variable.from_rb_var ary, name: \"ary\", var_table: var_table\nvar.name            #=> \"ary\"\nvar.var_table_index #=> 0\nvar_table[0].type   #=> \"Array\"\nvar_table[0].members[0].name            #=> \"[0]\"\nvar_table[0].members[0].var_table_index #=> 1\nvar_table[0].members[1].name            #=> \"[1]\"\nvar_table[0].members[1].var_table_index #=> 1\nvar_table[1].type #=> \"Hash\"\nvar_table[1].members[0].name #=> \"a\"\nvar_table[1].members[0].type #=> \"Integer\"\nvar_table[1].members[0].value #=> \"1\""}],"params":[{"name":"source","types":["Any"],"description":"Source Ruby variable to convert from","optional":false,"nullable":false},{"name":"name","types":["String"],"description":"Name of the varaible","optional":true,"default":"nil","nullable":true},{"name":"depth","types":["Integer"],"description":"Number of levels to evaluate in compound\nvariables. Default to\n<a data-custom-type=\"google/cloud/debugger/breakpoint/variable/max_depth\">Google::Cloud::Debugger::Breakpoint::Variable::MAX_DEPTH</a>","optional":true,"default":"MAX_DEPTH","nullable":false},{"name":"var_table","types":["Breakpoint::VariableTable"],"description":"A variable table\nto store shared compound variables. Optional.","optional":true,"default":"nil","nullable":true}],"exceptions":[],"returns":[{"types":["<a data-custom-type=\"google/cloud/debugger/breakpoint/variable\">Google::Cloud::Debugger::Breakpoint::Variable</a>"],"description":"Converted\nvariable."}]}]}