{"id":"google/cloud/bigtable/tabledataoperations","name":"TableDataOperations","title":["Google","Cloud","Bigtable","TableDataOperations"],"description":"<p>TableDataOperations</p>\n\n<p>Collection of table data operations - read rows, mutate rows,\nget sample row keys, read and modify row, mutate row based\non predicate result.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/table_data_operations.rb#L131","resources":[],"examples":[{"caption":"<p>Read Row</p>","code":"require \"google/cloud/bigtable\"\n\nclient = Google::Cloud::Bigtable.new(instance_id: \"instance-id\")\ntable = client.table(\"table-name\")\ntable.read_rows(rows_limit: 10) do |row|\n  # Process row\nend"},{"caption":"<p>Read single row using row key</p>","code":"require \"google/cloud/bigtable\"\n\nclient = Google::Cloud::Bigtable.new(instance_id: \"instance-id\")\ntable = client.table(\"table-name\")\ntable.read_row(\"row-key\")"},{"caption":"<p>Read sample row row keys</p>","code":"require \"google/cloud/bigtable\"\n\nclient = Google::Cloud::Bigtable.new(instance_id: \"instance-id\")\ntable = client.table(\"table-name\")\nrow_keys = table.sample_row_keys"},{"caption":"<p>Mutate row</p>","code":"require \"google/cloud/bigtable\"\n\nclient = Google::Cloud::Bigtable.new(instance_id: \"instance-id\")\ntable = client.table(\"table-name\")\nentry = Google::Cloud::Bigtable::MutationEntry.new(row_key: \"user01\")\nentry.set_cell({\n  family_name: \"cf1\",\n  column_qualifier: \"field01\",\n  timestamp_micros: Time.now.to_i * 1000,\n  value: \"XYZ\"\n}).delete_from_family(\"cf3\")\n\ntable.mutate_row(entry])"},{"caption":"<p>Mutate rows</p>","code":"require \"google/cloud/bigtable\"\n\nclient = Google::Cloud::Bigtable.new(instance_id: \"instance-id\")\ntable = client.table(\"table-name\")\nentry1 = Google::Cloud::Bigtable::MutationEntry.new(row_key: \"user01\")\nentry1.set_cell({\n  family_name: \"cf1\",\n  column_qualifier: \"field01\",\n  timestamp_micros: Time.now.to_i * 1000,\n  value: \"XYZ\"\n})\nentry2 = Google::Cloud::Bigtable::MutationEntry.new(row_key: \"user02\")\nentry2.delete_from_row\n\ntable.mutate_row([entry1, entry2]).each do |entry_result|\n  # Process entry result\nend"},{"caption":"<p>Read row, modify and write_row</p>","code":"require \"google/cloud/bigtable\"\n\nclient = Google::Cloud::Bigtable.new(instance_id: \"instance-id\")\ntable = client.table(\"table-name\")\nrule1 = Google::Bigtable::V2::ReadModifyWriteRule.new({\n  family_name: \"cf1\",\n  column_qualifier: \"c_qual\",\n  increment_amount: 1\n})\nrule2 = Google::Bigtable::V2::ReadModifyWriteRule.new({\n  family_name: \"cf2\",\n  column_qualifier: \"c_qual\",\n  append_value: \"Extra Data\"\n})\nrow = table.read_modify_write_row(\"user01\", [rule1, rule2])"},{"caption":"<p>Check and mutate row</p>","code":"require \"google/cloud/bigtable\"\n\nclient = Google::Cloud::Bigtable.new(instance_id: \"instance-id\")\ntable = client.table(\"table-name\")\npredicate_filter = Google::Bigtable::V2::RowFilter.new(sink: true)\ntrue_mutations = Google::Cloud::Bigtable::MutationEntry.new\nentry.set_cell({\n  family_name: \"cf1\",\n  column_qualifier: \"field01\",\n  timestamp_micros: Time.now.to_i * 1000,\n  value: \"XYZ\"\n})\n\nfalse_mutations = Google::Cloud::Bigtable::MutationEntry.new\nfalse_mutations.delete_from_family(\"cf3\")\n\nresponse = table.check_and_mutate_row(\n  \"user01\",\n  predicate_filter: predicate_filter,\n  true_mutations: true_mutations,\n  false_mutations: false_mutations\n)\n\np \"All predicates matched\" if response"}],"methods":[{"id":"read_rows-instance","type":"instance","name":"read_rows","title":["Google","Cloud","Bigtable","TableDataOperations#read_rows"],"description":"<p>row_set.row_ranges « row_range</p>\n\n<p>table.read_rows(rows: rows_set) do |row|\n    p row\n  end</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/table_data_operations.rb#L209","resources":[],"examples":[],"params":[],"exceptions":[],"returns":[]},{"id":"read_row-instance","type":"instance","name":"read_row","title":["Google","Cloud","Bigtable","TableDataOperations#read_row"],"description":"<p>Read single row</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/table_data_operations.rb#L272","resources":[],"examples":[{"caption":"","code":"client = Google::Cloud::Bigtable.new(instance_id: \"instance-id\")\n\ntable = client.table(\"table-name\")\n\nrow = table.read_row(\"user01\")"}],"params":[{"name":"row_key","types":["String"],"description":"The row keys and/or ranges to read.\nIf not specified, reads from all rows.\nA hash of the same form as <code>Google::Bigtable::V2::RowSet</code>\ncan also be provided.","optional":false,"nullable":false},{"name":"filter","types":["Google::Bigtable::V2::RowFilter | Hash"],"description":"The filter to apply to the contents of the specified row(s). If unset,\nreads the entirety of each row.\nA hash of the same form as <code>Google::Bigtable::V2::RowFilter</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/flatrow\">Google::Cloud::Bigtable::FlatRow</a>"],"description":""}]},{"id":"sample_row_keys-instance","type":"instance","name":"sample_row_keys","title":["Google","Cloud","Bigtable","TableDataOperations#sample_row_keys"],"description":"<p>Read sample row keys</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/table_data_operations.rb#L302","resources":[],"examples":[{"caption":"","code":"client = Google::Cloud.bigtable(instance_id: \"instance-id\")\n\ntable = client.table(\"table-name\")\n\ntable.sample_row_keys"}],"params":[{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Enumerable&lt;<a data-custom-type=\"google/bigtable/v2/samplerowkeysresponse\">Google::Bigtable::V2::SampleRowKeysResponse</a>&gt;"],"description":""}]},{"id":"mutate_row-instance","type":"instance","name":"mutate_row","title":["Google","Cloud","Bigtable","TableDataOperations#mutate_row"],"description":"<p>Mutates a row atomically. Cells already present in the row are left\nunchanged unless explicitly changed by +mutation+.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/table_data_operations.rb#L345","resources":[],"examples":[{"caption":"","code":"client = Google::Cloud.bigtable(instance_id: \"instance-id\")\n\ntable = client.table(\"table-name\")\n\nentry = Google::Cloud::Bigtable::MutationEntry.new(row_key: \"user01\")\nentry.set_cell({\n  family_name: \"cf1\",\n  column_qualifier: \"field01\",\n  timestamp_micros: Time.now.to_i * 1000,\n  value: \"XYZ\"\n}).delete_from_column({\n  family_name: \"cf2\",\n  column_qualifier: \"fiel01\",\n  time_range: {\n    start_timestamp_micros: (Time.now - 1.day).to_i * 1000,\n    end_timestamp_micros: Time.now.to_i * 1000\n  }\n}).delete_from_family(\"cf3\").delete_from_row\n\ntable.mutate_row(entry)"}],"params":[{"name":"entry","types":["Google::Cloud::Bigtable::MutationEntry"],"description":"entry has key of the row to which the mutation should be applied and\nlist mutations are changes to be atomically applied to the specified row.\nMutation entries are applied in order, meaning that earlier mutations can be\nmasked by later ones.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/bigtable/v2/mutaterowresponse\">Google::Bigtable::V2::MutateRowResponse</a>"],"description":""}]},{"id":"mutate_rows-instance","type":"instance","name":"mutate_rows","title":["Google","Cloud","Bigtable","TableDataOperations#mutate_rows"],"description":"<p>Mutates multiple rows in a batch. Each individual row is mutated\natomically as in MutateRow, but the entire batch is not executed\natomically.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/table_data_operations.rb#L400","resources":[],"examples":[{"caption":"","code":"client = Google::Cloud.bigtable(instance_id: \"instance-id\")\n\ntable = client.table(\"table-name\")\n\nentry1 = Google::Cloud::Bigtable::MutationEntry.new(row_key: \"user01\")\nentry1.set_cell({\n  family_name: \"cf1\",\n  column_qualifier: \"field01\",\n  timestamp_micros: Time.now.to_i * 1000,\n  value: \"XYZ\"\n}).delete_from_column({\n  family_name: \"cf2\",\n  column_qualifier: \"fiel01\"\n  time_range: {\n    start_timestamp_micros: (Time.now - 1.day).to_i * 1000,\n    end_timestamp_micros: Time.now.to_i * 1000\n  }\n}).delete_from_family(\"cf3\").delete_from_row\n\nentry2 = Google::Cloud::Bigtable::MutationEntry.new(row_key: \"user02\")\nentry2.delete_from_row\n\ntable.mutate_row([entry1, entry2]).each do |res|\n  p res\nend"}],"params":[{"name":"entries","types":["Array<Google::Cloud::Bigtable::MutationEntry>"],"description":"The row keys and corresponding mutations to be applied in bulk.\nEach entry is applied as an atomic mutation, but the entries may be\napplied in arbitrary order (even between entries for the same row).\nAt least one entry must be specified, and in total the entries can\ncontain at most 100000 mutations.","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Enumerable&lt;<a data-custom-type=\"google/bigtable/v2/mutaterowsresponse\">Google::Bigtable::V2::MutateRowsResponse</a>&gt;"],"description":"An enumerable of Google::Bigtable::V2::MutateRowsResponse instances."}]},{"id":"check_and_mutate_row-instance","type":"instance","name":"check_and_mutate_row","title":["Google","Cloud","Bigtable","TableDataOperations#check_and_mutate_row"],"description":"<p>Mutates a row atomically based on the output of a predicate Reader filter.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/table_data_operations.rb#L487","resources":[],"examples":[{"caption":"","code":"client = Google::Cloud.bigtable(instance_id: \"instance-id\")\n\ntable = client.table(\"table-id\")\n\npredicate_filter = Google::Bigtable::V2::RowFilter.new(sink: true)\ntrue_mutations = Google::Cloud::Bigtable::MutationEntry.new\nentry.set_cell({\n  family_name: \"cf1\",\n  column_qualifier: \"field01\",\n  timestamp_micros: Time.now.to_i * 1000,\n  value: \"XYZ\"\n}).delete_from_column({\n  family_name: \"cf2\",\n  column_qualifier: \"fiel01\",\n  time_range: {\n    start_timestamp_micros: (Time.now - 1.day).to_i * 1000,\n    end_timestamp_micros: Time.now.to_i * 1000\n  }\n})\n\nfalse_mutations = Google::Cloud::Bigtable::MutationEntry.new\nfalse_mutations.delete_from_family(\"cf3\")\n\nresponse = table.check_and_mutate_row(\n  \"user01\",\n  predicate_filter: predicate_filter,\n  true_mutations: true_mutations,\n  false_mutations: false_mutations\n)\n\nif response\n  puts \"All predicates matched\"\nend"}],"params":[{"name":"row_key","types":["String"],"description":"The key of the row to which the conditional mutation should be applied.","optional":false,"nullable":false},{"name":"predicate_filter","types":["Google::Bigtable::V2::RowFilter | Hash"],"description":"The filter to be applied to the contents of the specified row. Depending\non whether or not any results are yielded, either +true_mutations+ or\n+false_mutations+ will be executed. If unset, checks that the row contains\nany values at all.\nA hash of the same form as <code>Google::Bigtable::V2::RowFilter</code>\ncan also be provided.\nUse alias of <code>Bigtable::RowFilter</code> of <code>Google::Bigtable::V2::RowFilter</code>","optional":true,"default":"nil","nullable":true},{"name":"true_mutations","types":["Google::Cloud::Bigtable::MutationEntry"],"description":"Changes to be atomically applied to the specified row if +predicate_filter+\nyields at least one cell when applied to +row_key+. Entries are applied in\norder, meaning that earlier mutations can be masked by later ones.\nMust contain at least one entry if +false_mutations+ is empty, and at most\n100000.\nA hash of the same form as <code>Google::Bigtable::V2::Mutation</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"false_mutations","types":["Google::Cloud::Bigtable::MutationEntry"],"description":"Changes to be atomically applied to the specified row if +predicate_filter+\ndoes not yield any cells when applied to +row_key+. Entries are applied in\norder, meaning that earlier mutations can be masked by later ones.\nMust contain at least one entry if +true_mutations+ is empty, and at most\n100000.\nA hash of the same form as <code>Google::Bigtable::V2::Mutation</code>\ncan also be provided.","optional":true,"default":"nil","nullable":true},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["Boolean"],"description":"Predicate match or not status"}]},{"id":"read_modify_write_row-instance","type":"instance","name":"read_modify_write_row","title":["Google","Cloud","Bigtable","TableDataOperations#read_modify_write_row"],"description":"<p>Modifies a row atomically on the server. The method reads the latest\nexisting timestamp and value from the specified columns and writes a new\nentry based on pre-defined read/modify/write rules. The new value for the\ntimestamp is the greater of the existing timestamp or the current server\ntime. The method returns the new contents of all modified cells.</p>","source":"google-cloud-bigtable/lib/google/cloud/bigtable/table_data_operations.rb#L552","resources":[],"examples":[{"caption":"","code":"client = Google::Cloud.bigtable(instance_id: \"instance-id\")\n\ntable = client.table(\"table-name\")\n\nrule1 = Google::Bigtable::V2::ReadModifyWriteRule.new({\n  family_name: \"cf1\",\n  column_qualifier: \"c_qual\",\n  increment_amount: 1\n})\n\nrule2 = Google::Bigtable::V2::ReadModifyWriteRule.new({\n  family_name: \"cf2\",\n  column_qualifier: \"c_qual\",\n  append_value: \"Extra Data\"\n})\n\nrow = table.read_modify_write_row(\"user01\", [rule1, rule2])\n\nputs row.key\nputs row.column_families"}],"params":[{"name":"row_key","types":["String"],"description":"The key of the row to which the read/modify/write rules should be applied.","optional":false,"nullable":false},{"name":"rules","types":["Array<Google::Bigtable::V2::ReadModifyWriteRule | Hash>"],"description":"Rules specifying how the specified row’s contents are to be transformed\ninto writes. Entries are applied in order, meaning that earlier rules will\naffect the results of later ones.\nA hash of the same form as <code>Google::Bigtable::V2::ReadModifyWriteRule</code>\ncan also be provided.\nUse protobuf alias <code>Bigtable::ReadModifyWriteRule</code> of\n<code>Google::Bigtable::V2::ReadModifyWriteRule</code>","optional":false,"nullable":false},{"name":"options","types":["Google::Gax::CallOptions"],"description":"Overrides the default settings for this call, e.g, timeout,\nretries, etc.","optional":true,"default":"nil","nullable":true}],"exceptions":[{"type":"Google::Gax::GaxError","description":"if the RPC is aborted."}],"returns":[{"types":["<a data-custom-type=\"google/cloud/bigtable/flatrow\">Google::Cloud::Bigtable::FlatRow</a>"],"description":""}]}]}